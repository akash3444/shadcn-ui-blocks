{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "avatar-08",
  "type": "registry:component",
  "title": "Avatar Shape",
  "description": "Different shapes of avatar component",
  "dependencies": [
    "radix-ui",
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "avatar"
  ],
  "files": [
    {
      "path": "src/components/customized/avatar/avatar-08.tsx",
      "content": "import { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\n\nexport default function AvatarShapeDemo() {\n  return (\n    <div className=\"grid gap-5\">\n      <div className=\"flex items-center gap-4\">\n        <Avatar className=\"rounded-none\">\n          <AvatarFallback className=\"rounded-none bg-indigo-500 text-white\">\n            A\n          </AvatarFallback>\n        </Avatar>\n        <Avatar className=\"rounded-md\">\n          <AvatarFallback className=\"rounded-lg bg-indigo-500 text-white\">\n            A\n          </AvatarFallback>\n        </Avatar>\n        <Avatar className=\"rounded-full\">\n          <AvatarFallback className=\"rounded-full bg-indigo-500 text-white\">\n            A\n          </AvatarFallback>\n        </Avatar>\n      </div>\n      <div className=\"flex items-center gap-4\">\n        <Avatar className=\"rounded-none\">\n          <AvatarFallback className=\"rounded-none bg-indigo-500/25 text-indigo-500\">\n            A\n          </AvatarFallback>\n        </Avatar>\n        <Avatar className=\"rounded-md\">\n          <AvatarFallback className=\"rounded-lg bg-indigo-500/25 text-indigo-500\">\n            A\n          </AvatarFallback>\n        </Avatar>\n        <Avatar className=\"rounded-full\">\n          <AvatarFallback className=\"rounded-full bg-indigo-500/25 text-indigo-500\">\n            A\n          </AvatarFallback>\n        </Avatar>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/ui/avatar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Avatar as AvatarPrimitive } from \"radix-ui\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        \"relative flex size-8 shrink-0 overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn(\"aspect-square size-full\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        \"bg-muted flex size-full items-center justify-center rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { config } from \"@/config\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function capitalize(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype GroupBy<T, K extends keyof T> = Record<string, T[]>;\n\nexport function groupBy<T, K extends keyof T>(\n  array: T[],\n  key: K\n): GroupBy<T, K> {\n  return array.reduce((acc, item) => {\n    const keyValue = String(item[key]);\n    if (!acc[keyValue]) {\n      acc[keyValue] = [];\n    }\n    acc[keyValue].push(item);\n    return acc;\n  }, {} as GroupBy<T, K>);\n}\n\nexport function absoluteUrl(path: string) {\n  return process.env.NODE_ENV === \"development\"\n    ? `http://localhost:3000${path}`\n    : `https://${config.appUrl}${path}`;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/config.ts",
      "content": "export const config = {\n  appUrl:\n    process.env.NODE_ENV === \"production\"\n      ? process.env.VERCEL_PROJECT_PRODUCTION_URL ??\n        process.env.NEXT_PUBLIC_APP_URL!\n      : \"localhost:3000\",\n  social: {\n    github: \"https://github.com/akash3444/shadcn-ui-blocks\",\n    twitter: \"https://twitter.com/shadcnui_blocks\",\n  },\n};\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}