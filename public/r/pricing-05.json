{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pricing-05",
  "type": "registry:block",
  "title": "Pricing 05",
  "description": "A simple pricing block",
  "dependencies": [
    "lucide-react",
    "radix-ui",
    "class-variance-authority",
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "badge",
    "button",
    "separator"
  ],
  "files": [
    {
      "path": "src/blocks/pricing-05/page.tsx",
      "content": "import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { cn } from \"@/lib/utils\";\nimport { CircleCheck } from \"lucide-react\";\n\nconst plans = [\n  {\n    name: \"Starter\",\n    price: 19,\n    description:\n      \"Get 20 AI-generated portraits with 2 unique styles and filters.\",\n    features: [\n      \"5 hours turnaround time\",\n      \"20 AI portraits\",\n      \"Choice of 2 styles\",\n      \"Choice of 2 filters\",\n      \"2 retouch credits\",\n    ],\n    buttonText: \"Get 20 portraits in 5 hours\",\n  },\n  {\n    name: \"Advanced\",\n    price: 29,\n    isRecommended: true,\n    description:\n      \"Get 50 AI-generated portraits with 5 unique styles and filters.\",\n    features: [\n      \"3 hours turnaround time\",\n      \"50 AI portraits\",\n      \"Choice of 5 styles\",\n      \"Choice of 5 filters\",\n      \"5 retouch credits\",\n    ],\n    buttonText: \"Get 50 portraits in 3 hours\",\n    isPopular: true,\n  },\n  {\n    name: \"Premium\",\n    price: 49,\n    description:\n      \"Get 100 AI-generated portraits with 10 unique styles and filters.\",\n    features: [\n      \"1-hour turnaround time\",\n      \"100 AI portraits\",\n      \"Choice of 10 styles\",\n      \"Choice of 10 filters\",\n      \"10 retouch credits\",\n    ],\n    buttonText: \"Get 100 portraits in 1 hour\",\n  },\n];\n\nconst Pricing05 = () => {\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center py-12 px-6\">\n      <h1 className=\"text-5xl sm:text-6xl font-semibold text-center tracking-tighter\">\n        Pricing\n      </h1>\n      <div className=\"mt-12 sm:mt-16 max-w-(--breakpoint-lg) mx-auto grid grid-cols-1 lg:grid-cols-3 gap-10 lg:gap-0 items-center\">\n        {plans.map((plan) => (\n          <div\n            key={plan.name}\n            className={cn(\n              \"relative border p-7 rounded-lg lg:rounded-none lg:first:rounded-l-xl lg:last:rounded-r-xl\",\n              {\n                \"ring-2 ring-inset border-primary\": plan.isPopular,\n              }\n            )}\n          >\n            {plan.isPopular && (\n              <Badge className=\"absolute top-0 right-1/2 translate-x-1/2 -translate-y-1/2\">\n                Most Popular\n              </Badge>\n            )}\n            <h3 className=\"text-lg font-medium\">{plan.name}</h3>\n            <p className=\"mt-2 text-4xl font-bold\">${plan.price}</p>\n            <p className=\"mt-4 font-medium text-muted-foreground\">\n              {plan.description}\n            </p>\n            <Separator className=\"my-6\" />\n            <ul className=\"space-y-2\">\n              {plan.features.map((feature) => (\n                <li key={feature} className=\"flex items-start gap-2\">\n                  <CircleCheck className=\"h-4 w-4 mt-1 text-green-600\" />\n                  {feature}\n                </li>\n              ))}\n            </ul>\n            <Button\n              variant={plan.isPopular ? \"default\" : \"outline\"}\n              size=\"lg\"\n              className=\"w-full mt-6\"\n            >\n              {plan.buttonText}\n            </Button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Pricing05;\n",
      "type": "registry:page",
      "target": "app/pricing/page.tsx"
    },
    {
      "path": "src/components/ui/badge.tsx",
      "content": "import * as React from \"react\"\nimport { Slot as SlotPrimitive } from \"radix-ui\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? SlotPrimitive.Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/components/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot as SlotPrimitive } from \"radix-ui\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? SlotPrimitive.Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/components/ui/separator.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Separator as SeparatorPrimitive } from \"radix-ui\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Separator({\n  className,\n  orientation = \"horizontal\",\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { config } from \"@/config\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function capitalize(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype GroupBy<T, K extends keyof T> = Record<string, T[]>;\n\nexport function groupBy<T, K extends keyof T>(\n  array: T[],\n  key: K\n): GroupBy<T, K> {\n  return array.reduce((acc, item) => {\n    const keyValue = String(item[key]);\n    if (!acc[keyValue]) {\n      acc[keyValue] = [];\n    }\n    acc[keyValue].push(item);\n    return acc;\n  }, {} as GroupBy<T, K>);\n}\n\nexport function absoluteUrl(path: string) {\n  return process.env.NODE_ENV === \"development\"\n    ? `http://localhost:3000${path}`\n    : `https://${config.appUrl}${path}`;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/config.ts",
      "content": "export const config = {\n  appUrl:\n    process.env.NODE_ENV === \"production\"\n      ? process.env.VERCEL_PROJECT_PRODUCTION_URL ??\n        process.env.NEXT_PUBLIC_APP_URL!\n      : \"localhost:3000\",\n  social: {\n    github: \"https://github.com/akash3444/shadcn-ui-blocks\",\n    twitter: \"https://twitter.com/shadcnui_blocks\",\n  },\n};\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}